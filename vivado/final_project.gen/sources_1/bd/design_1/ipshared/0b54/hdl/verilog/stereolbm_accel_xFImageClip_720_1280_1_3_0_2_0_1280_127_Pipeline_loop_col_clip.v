// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stereolbm_accel_xFImageClip_720_1280_1_3_0_2_0_1280_127_Pipeline_loop_col_clip (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_sobel_x_i_43_dout,
        in_sobel_x_i_43_empty_n,
        in_sobel_x_i_43_read,
        right_clipped6_din,
        right_clipped6_full_n,
        right_clipped6_write,
        width_load,
        i,
        height_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_sobel_x_i_43_dout;
input   in_sobel_x_i_43_empty_n;
output   in_sobel_x_i_43_read;
output  [7:0] right_clipped6_din;
input   right_clipped6_full_n;
output   right_clipped6_write;
input  [10:0] width_load;
input  [9:0] i;
input  [9:0] height_load;

reg ap_idle;
reg in_sobel_x_i_43_read;
reg right_clipped6_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln622_fu_111_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_sobel_x_i_43_blk_n;
wire    ap_block_pp0_stage0;
reg    right_clipped6_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] j_9_reg_209;
wire    pix_1_xFImageClipUtility_1_s_fu_93_ap_ready;
wire   [15:0] pix_1_xFImageClipUtility_1_s_fu_93_ap_return;
reg   [10:0] j_fu_58;
wire   [10:0] j_10_fu_117_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_9;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] tmp_fu_134_p4;
wire   [6:0] trunc_ln637_fu_150_p1;
wire   [0:0] icmp_ln637_fu_128_p2;
wire   [0:0] icmp_ln637_2_fu_144_p2;
wire   [0:0] or_ln637_fu_168_p2;
wire   [6:0] select_ln637_fu_160_p3;
wire   [6:0] add_ln637_fu_154_p2;
wire   [6:0] p_V_fu_174_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

stereolbm_accel_xFImageClipUtility_1_s pix_1_xFImageClipUtility_1_s_fu_93(
    .ap_ready(pix_1_xFImageClipUtility_1_s_fu_93_ap_ready),
    .i(i),
    .j(j_9_reg_209),
    .height(height_load),
    .width(width_load),
    .p_read(in_sobel_x_i_43_dout),
    .ap_return(pix_1_xFImageClipUtility_1_s_fu_93_ap_return)
);

stereolbm_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln622_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= j_10_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_9_reg_209 <= ap_sig_allocacmp_j_9;
    end
end

always @ (*) begin
    if (((icmp_ln622_fu_111_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_9 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_9 = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_sobel_x_i_43_blk_n = in_sobel_x_i_43_empty_n;
    end else begin
        in_sobel_x_i_43_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_sobel_x_i_43_read = 1'b1;
    end else begin
        in_sobel_x_i_43_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        right_clipped6_blk_n = right_clipped6_full_n;
    end else begin
        right_clipped6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        right_clipped6_write = 1'b1;
    end else begin
        right_clipped6_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln637_fu_154_p2 = (trunc_ln637_fu_150_p1 + 7'd31);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((right_clipped6_full_n == 1'b0) | (in_sobel_x_i_43_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((right_clipped6_full_n == 1'b0) | (in_sobel_x_i_43_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((right_clipped6_full_n == 1'b0) | (in_sobel_x_i_43_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((right_clipped6_full_n == 1'b0) | (in_sobel_x_i_43_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln622_fu_111_p2 = ((ap_sig_allocacmp_j_9 == width_load) ? 1'b1 : 1'b0);

assign icmp_ln637_2_fu_144_p2 = (($signed(tmp_fu_134_p4) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln637_fu_128_p2 = (($signed(pix_1_xFImageClipUtility_1_s_fu_93_ap_return) < $signed(16'd65505)) ? 1'b1 : 1'b0);

assign j_10_fu_117_p2 = (ap_sig_allocacmp_j_9 + 11'd1);

assign or_ln637_fu_168_p2 = (icmp_ln637_fu_128_p2 | icmp_ln637_2_fu_144_p2);

assign p_V_fu_174_p3 = ((or_ln637_fu_168_p2[0:0] == 1'b1) ? select_ln637_fu_160_p3 : add_ln637_fu_154_p2);

assign right_clipped6_din = p_V_fu_174_p3;

assign select_ln637_fu_160_p3 = ((icmp_ln637_fu_128_p2[0:0] == 1'b1) ? 7'd0 : 7'd62);

assign tmp_fu_134_p4 = {{pix_1_xFImageClipUtility_1_s_fu_93_ap_return[15:5]}};

assign trunc_ln637_fu_150_p1 = pix_1_xFImageClipUtility_1_s_fu_93_ap_return[6:0];

endmodule //stereolbm_accel_xFImageClip_720_1280_1_3_0_2_0_1280_127_Pipeline_loop_col_clip
